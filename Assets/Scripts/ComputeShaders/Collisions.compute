#pragma kernel CSMain

struct ParticleStruct
{
    float2 position;
};

StructuredBuffer<ParticleStruct> particles;
RWStructuredBuffer<float2> positionChanges;
float particleRadius;

[numthreads(256, 1, 1)] void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint particleIndex = id.x;

    // Check if the particle index is valid
    if (particleIndex >= particles.Length)
        return;

    ParticleStruct particle = particles[particleIndex];

    // Check for collisions with other particles
    // TODO: Optimize this by using a spatial partitioning data structure
    for (uint i = 0; i < particles.Length; i++)
    {
        if (i == particleIndex)
            continue;

        ParticleStruct other = particles[i];

        float2 diff = particle.position - other.position;
        float dist = length(diff);

        // Check for collision
        if (dist < particleRadius * 2.0f)
        {
            if (dist == 0.0f)
                dist = 0.0001f; // Incase the particles are at the same position
            float2 normal = diff / dist;

            float overlap = particleRadius * 2.0f - dist;

            positionChanges[particleIndex] += normal * (overlap * 0.25f); // Modify the multiplier if simulation looks too unstable
        }
    }
}
